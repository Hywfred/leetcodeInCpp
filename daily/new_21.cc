/**
爱丽丝参与一个大致基于纸牌游戏 “21 点” 规则的游戏，描述如下：
爱丽丝以 0 分开始，并在她的得分少于 K 分时抽取数字。
抽取时，她从 [1, W] 的范围中随机获得一个整数作为分数进行累计，其中W 是整数。
每次抽取都是独立的，其结果具有相同的概率。
当爱丽丝获得不少于 K 分时，她就停止抽取数字。 爱丽丝的分数不超过 N
的概率是多少？
示例 1：
输入：N = 10, K = 1, W = 10
输出：1.00000 说明：爱丽丝得到一张卡，然后停止。
示例 2：
输入：N = 6, K = 1, W = 10
输出：0.60000
说明：爱丽丝得到一张卡，然后停止。 在 W = 10 的 6 种可能下，她的得分不超过 N = 6 分。
示例 3：
输入：N = 21, K = 17, W = 10
输出：0.73278
提示：
0 <= K <= N <= 10000
1 <= W <= 10000
如果答案与正确答案的误差不超过 10^-5，则该答案将被视为正确答案通过。
此问题的判断限制时间已经减少。
*/
#include "daily.h"

using namespace std;

/**
 * 思路：动态规划
 * dp[i] 代表当前总点数为 i 时的概率。
 * 则最终获胜概率 P = dp[K] + dp[K+1] + ... + dp[N]，如果 N>K 的话。
 * 状态转移方程为：
 * dp[i] = (1/W) * (dp[i-1] + dp[i-2] + ... + dp[i-W])
 * 即当前的概率只与此前 W 个概率有关
 */
double Solution::new21Game(int N, int K, int W) {
    // 边界判断
    if (!K) return 1.0;
    if (!N || K > N) return 0.0;
    double sum = 1.0;  // 代表 i 之前 W 个点数的概率和
    double ans = 0.0;  // 存储结果概率
    vector<double> dp(N + 1);
    dp[0] = 1.0;
    for (int i = 1; i <= N; ++i) {
        dp[i] = 1.0 * sum / W;
        if (i < K)
            sum += dp[i];
        else
            ans += dp[i];
        if (i >= W) sum -= dp[i - W];
    }
    return ans;
}